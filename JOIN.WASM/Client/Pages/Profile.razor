@page "/profile"
@using JOIN.WASM.Client.ViewModels
@using JOIN.WASM.Shared.Models
@using System.Security.Claims
@inject IProfileViewModel _profileViewModel
@inject NavigationManager _navigationManager
@inject IJSRuntime jsRuntime 
@inject HttpClient _httpClient


@*AutenticaionStateInjection*@
@*@inject AuthenticationStateProvider _authenticationStateProvider*@

<h2><b>Profile</b></h2> 
<hr />

<div class="row col-12">

    <div class="col-4">
        <img src="@_profileViewModel.ProfilePicDataUrl" style="width: 250px; height: 250px;"> <br/> <br/>
        <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </div>

    <div class="col-8">
        <input type="text" @bind-value="_profileViewModel.FirstName" class="form-control" placeholder="first name">
        <br/>
        <input type="text" @bind-value="_profileViewModel.LastName" class="form-control" placeholder="last name">
        <br/>
        <input type="text" @bind-value="_profileViewModel.EmailAddress" class="form-control" placeholder="email address">
        <br/>
        <textarea class="form-control" @bind="_profileViewModel.AboutMe" placeholder="about me"></textarea>
        <br/>
        <button class="btn btn-primary" @onclick="_profileViewModel.UpdateProfile">Update Profile</button>
        <button class="btn btn-primary" @onclick="DownloadProfilePicture">Download Profile Picture</button>
        <button class="btn btn-primary" @onclick="DownloadServerFile">Download a Document</button>
        
    </div>

</div>


@code {


    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }


    /// <summary>
    /// Method put file to save in database 
    /// </summary>
    /// <param name="inputFileChangeEvent"></param>
    /// <returns></returns>
    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //get the file
        var file = inputFileChangeEvent.File;

        //read that file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        //convert byte array to base 64 string
        _profileViewModel.ProfilePicDataUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }


    /// <summary>
    /// Method for download th picture
    /// </summary>
    /// <returns></returns>
    private async Task DownloadProfilePicture()
    {

        string[] base64String = _profileViewModel.ProfilePicDataUrl.Split(',');

        //Using javascript withOut Isolation
        //await jsRuntime.InvokeVoidAsync("downloadFile","image/png",base64String[1],"profile.png");

        //Using javascript with Isolation
        var module = await jsRuntime.InvokeAsync<IJSObjectReference>("import","./js/siteIsolation.js");
        await module.InvokeVoidAsync("downloadFileIsolation","image/png",base64String[1],"profile.png");

    }


    /// <summary>
    /// Method for download define document
    /// </summary>
    /// <returns></returns>
    private async Task DownloadServerFile()
    {
        //get base64 string from web api call
        var httpResponseMessage = await _httpClient.GetAsync($"api/user/DownloadServerFile");
        var base64String = httpResponseMessage.Content.ReadAsStringAsync().Result;

        //call javascript function to download the file
        await jsRuntime.InvokeVoidAsync("downloadFile","application/vnd.openxmlformats-officedocument.wordprocessingml.document",base64String, "document.docx");
    }



    protected override async Task OnInitializedAsync()
    {

        //Using AutenticationState
        var authState = await authenticationState;

        //AutenticationStateInjection
        //var authState = await _authenticationStateProvider.GetAuthenticationStateAsync(); 


        var user = authState.User;
        
        if(user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileViewModel.UserId = Convert.ToInt64(claim?.Value) ;
            await _profileViewModel.GetProfile();
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }

    }

}


